{"version":3,"sources":["Calculator.jsx","App.js","serviceWorker.js","index.js"],"names":["Calculator","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getnum1","e","num","target","value","setState","num1","getnum2","num2","add","result","parseInt","state","sub","mul","divide","parseFloat","perc","clear","react_default","a","createElement","className","type","onChange","placeholder","onClick","Component","App","src_Calculator","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b63687aa.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\nimport './cal.css';\r\n\r\nclass Calculator extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            num1:'',\r\n            num2:'',\r\n            result:''\r\n        }\r\n    }\r\n\r\n    getnum1 = (e)=>{\r\n        const num=e.target.value;\r\n        this.setState({\r\n            num1:num\r\n        })\r\n    }\r\n\r\n    getnum2 = (e)=>{\r\n        const num=e.target.value;\r\n        this.setState({\r\n            num2:num\r\n        })\r\n    }\r\n\r\n    add = ()=>{\r\n        const num1 = parseInt(this.state.num1);\r\n        const num2 = parseInt(this.state.num2);\r\n        const result = num1+num2;\r\n\r\n        this.setState({\r\n            result:result\r\n        })\r\n    }\r\n\r\n    sub = ()=>{\r\n        const num1 = parseInt(this.state.num1);\r\n        const num2 = parseInt(this.state.num2);\r\n        const result = num1-num2;\r\n\r\n        this.setState({\r\n            result:result\r\n        })\r\n    }\r\n\r\n    mul = ()=>{\r\n        const num1 = parseInt(this.state.num1);\r\n        const num2 = parseInt(this.state.num2);\r\n        const result = num1*num2;\r\n\r\n        this.setState({\r\n            result:result\r\n        })\r\n    }\r\n\r\n    divide = ()=>{\r\n        const num1 = parseFloat(this.state.num1);\r\n        const num2 = parseFloat(this.state.num2);\r\n        const result = num1/num2;\r\n\r\n        this.setState({\r\n            result:result\r\n        })\r\n    }\r\n\r\n    perc = ()=>{\r\n        const num1 = parseInt(this.state.num1);\r\n        const num2 = parseInt(this.state.num2);\r\n        const result = num1%num2;\r\n\r\n        this.setState({\r\n            result:result\r\n        })\r\n    }\r\n\r\n    clear = ()=>{\r\n        this.setState({\r\n            num1:\"\",\r\n            num2:\"\",\r\n            result:\"\"\r\n        })\r\n    }\r\n    \r\n\r\n    render(){\r\n        return<section className=\"container\">\r\n            <h2 className=\"text-center \">Calculator</h2> \r\n            <div className=\"row\">\r\n                <div className=\"col-sm-12\">\r\n                    <input type=\"number\" value={this.state.num1} className=\"form-control\" onChange={this.getnum1} placeholder=\"Enter First Number\"/>\r\n                    <input type=\"number\" value={this.state.num2} className=\"form-control\" onChange={this.getnum2} placeholder=\"Enter Second Number\"/> \r\n                    <span>Result</span> <span>{this.state.result}</span> <br/>\r\n                </div>\r\n            </div>\r\n            <div>\r\n        <button onClick={this.add} className=\"btn btn-dark\">+</button>\r\n            <button onClick={this.sub} className=\"btn btn-dark\">-</button>\r\n            <button onClick={this.divide} className=\"btn btn-dark\">/</button>\r\n            <button onClick={this.mul} className=\"btn btn-dark\">*</button>\r\n            <button onClick={this.perc} className=\"btn btn-dark\">%</button>\r\n            <button onClick={this.clear} className=\"btn btn-secondary\">clear</button>\r\n        </div>\r\n        </section>\r\n    }\r\n}\r\n\r\n/*let aa;\r\n\r\nclass Calculator extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            num1:'',\r\n            num2:'',\r\n            operation:'',\r\n            result:''\r\n        }\r\n    }\r\n\r\n    getnum = (e)=>{\r\n        aa=e.target.value;\r\n        this.setState({\r\n            num2:aa\r\n        })\r\n    }\r\n\r\n    getnum2 = ()=>{\r\n        var num=aa;\r\n        this.setState({\r\n            num1:num\r\n        })\r\n    }\r\n\r\n    getAnswer = (e)=>{\r\n        var a = parseInt(this.state.num1);\r\n        var b = parseInt(this.state.num2);\r\n        \r\n        var res = a+b;\r\n            this.setState({\r\n                result:res\r\n            })\r\n    }\r\n\r\n\r\n    render(){\r\n        return <div>\r\n            <input type=\"number\" value={this.state.result} onChange={this.getnum} placeholder=\"Enter Number\"/> <br/>\r\n            <span>{this.state.num1}</span>\r\n            <br/>\r\n            <span>{this.state.num2}</span>\r\n            <br/>\r\n            <span>{this.state.result}</span><br/>\r\n            <button onClick={this.getnum2}>+</button>\r\n            <button>-</button>\r\n            <button>/</button>\r\n            <button>*</button>\r\n            <button>%</button>\r\n            <button onClick={this.getAnswer}>=</button>\r\n\r\n\r\n        </div>\r\n    }\r\n}*/\r\n\r\n\r\n\r\nexport default Calculator;","import React from 'react';\nimport './App.css';\nimport Calculator from './Calculator';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Calculator/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}